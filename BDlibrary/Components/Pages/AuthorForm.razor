@page "/author/new"
@inject NavigationManager _navigator;
@inject IRepositorioAuthors _repositorio;

<h3>Nuevo Autor</h3>
<EditForm Model="_author" OnValidSubmit="Guardar" FormName="autorForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Nombre:</label>
        <InputText @bind-Value="_author.Name" class="form-control" />
        <ValidationMessage For="@(() => _author.Name)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Año de nacimiento:</label>
        <InputNumber @bind-Value="_author.BirthDate" class="form-control" />
        <ValidationMessage For="@(() => _author.BirthDate)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Nacionalidad:</label>
        <InputText @bind-Value="_author.Nacionalidad" class="form-control" />
        <ValidationMessage For="@(() => _author.Nacionalidad)" />
    </div>

    <button type="submit" class="btn btn-success">Guardar autor</button>
    <button class="btn btn-secondary ms-2" @onclick="Cancelar" @onclick:preventDefault>Cancelar</button>
</EditForm>

@code {
    private Author _author = new();
    public int Id { get; set; }

    private async Task Guardar()
    {
        if (Id > 0)
        {
            await _repositorio.Update(Id, _author);
        }
        else
        {
            await _repositorio.Add(_author!);
        }
        _navigator.NavigateTo("/books/new");
    }

    private void Cancelar()
    {
        _navigator.NavigateTo("/books/new");
    }
}
